Model CASTEP, Test phonon_Ti_hcp
Test run at 2019-12-13 10:13

model file: ../../models/CASTEP/model.py
============================================================
import os
from distutils import spawn

#from matscipy.socketcalc import CastepClient, SocketCalculator
from ase.calculators.castep import Castep

mpirun = "aprun"
mpirun_args = "-n 48"
castep = "castep.mpi"

os.environ['CASTEP_COMMAND'] = '{0} {1} {2}'.format(mpirun, mpirun_args, castep)

print os.environ['CASTEP_COMMAND']

name = 'CASTEP'
Castep.name = name
Castep.todict = lambda self: {}

no_checkpoint = True

model_dir = os.path.dirname(os.path.realpath(__file__))

def start(test_name):
        global calculator
	calculator = Castep(directory="./_CASTEP",
			cut_off_energy=500, #700
                        max_scf_cycles=250,
                        calculate_stress=True,
                        finite_basis_corr='automatic',
                        smearing_width='0.1', #0.1
                        #elec_energy_tol='0.0000001',
                        #elec_energy_tol='0.0000001',
                        #elec_method='edft',
                        #nextra_bands='13',
                        mixing_scheme='Pulay',
                        kpoints_mp_spacing='0.04', #0.015
                        #perc_extra_bands=150,
                        write_checkpoint='none')

#                        cut_off_energy=600, #700
#                        max_scf_cycles=250,
#                        calculate_stress=True,
#                        finite_basis_corr='automatic',
#                        smearing_width='0.1', #0.1
#                        #elec_energy_tol='0.0000001',
#                        #elec_method='edft',
#                        #nextra_bands='13',
#                        mixing_scheme='Pulay',
#                        kpoints_mp_spacing='0.04', #0.015
#                        #perc_extra_bands=150,
#                        write_checkpoint='none')

============================================================
test file: /fs3/e89/e89/casv2/ship-testing-framework/scripts/../tests/TiAl/phonon_Ti_hcp/test.py
============================================================
from ase import Atoms
from phonopy import Phonopy
from phonopy.structure.atoms import PhonopyAtoms
import numpy as np
import model
from ase.optimize import BFGS
import os
import sys
from ase.io import read, write

import phonopy
from phonopy.phonon.band_structure import get_band_qpoints_and_path_connections

calc = model.calculator

model_name = model.model_dir.split("/")[-1]

def get_crystal():
    at = read(os.path.join(os.path.abspath(os.path.dirname(__file__)), "bulk.xyz"))

    cell = PhonopyAtoms(symbols=at.get_chemical_symbols(),
                    cell=at.get_cell(),
                    positions=at.get_positions())

    return cell

def phonopy_pre_process(cell, supercell_matrix=None):

    smat = [[3,0,0], [0,3,0], [0,0,3]]


    phonon = Phonopy(cell,
                     smat)

    phonon.generate_displacements(distance=0.01)
    print("[Phonopy] Atomic displacements:")
    disps = phonon.get_displacements()
    for d in disps:
        print("[Phonopy] %d %s" % (d[0], d[1:]))
    return phonon

def run(calc, phonon):
    supercells = phonon.get_supercells_with_displacements()
    # Force calculations by calculator
    set_of_forces = []
    for (i,scell) in enumerate(supercells):
        ##########
        at = Atoms(symbols=scell.get_chemical_symbols(),
                      scaled_positions=scell.get_scaled_positions(),
                      cell=scell.get_cell(),
                      pbc=True)

        at.set_calculator(calc)

        energy = at.get_potential_energy()
        forces = at.get_forces()
        stress = at.get_stress(voigt=False)

        drift_force = forces.sum(axis=0)
        print(("[Phonopy] Drift force:" + "%11.5f" * 3) % tuple(drift_force))
        # Simple translational invariance
        for force in forces:
            force -= drift_force / forces.shape[0]

        at.arrays["force"] = forces
        at.info["virial"] = -1.0 * at.get_volume() * stress
        at.info["energy"] = energy

        write("{}_scell.xyz".format(i), at)
        set_of_forces.append(forces)
    return set_of_forces

cell = get_crystal()
phonon = phonopy_pre_process(cell, supercell_matrix=np.eye(3, dtype='intc'))
set_of_forces = run(calc, phonon)
phonon.produce_force_constants(forces=set_of_forces)

path = [[[0, 0, 0], [-0.5, 0.5, 0.5], [0.25, 0.25, 0.25], [0, 0, 0], [0, 0.5, 0]]]
labels = ["$\\Gamma$", "H", "P", "$\\Gamma$", "N"]
qpoints, connections = get_band_qpoints_and_path_connections(path, npoints=51)
phonon.run_band_structure(qpoints, path_connections=connections, labels=labels)

phonon.write_yaml_band_structure(filename="{}.yaml".format(model_name))
============================================================
aprun -n 48 castep.mpi
[Phonopy] Atomic displacements:
[Phonopy] 0 [0.005338467418154442, -1.6977702972561242e-18, 0.008455812534895949]
castep call stdout:
Application 38300643 resources: utime ~92402s, stime ~320s, Rss ~808348, inblocks ~150101, outblocks ~315260
[Phonopy] Drift force:   -0.00001   -0.00002    0.00001
============================================================
Property calculation output:

Traceback (most recent call last):
  File "../../../scripts/run-model-test.py", line 138, in <module>
    json.dump(test.properties, json_file)
AttributeError: 'module' object has no attribute 'properties'
